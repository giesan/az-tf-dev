# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  # name: default
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'tfstateRG'
  bkstrg: 'tfstatestgscc71213'
  bkcontainer: 'tfstate'
  bkstrgkey: 'terraform.tfstate'

stages:
  - stage: Tests
    jobs:
    - job:
      displayName: Unit tests
      steps:
      - script: echo simulate running your unit tests!
        displayName: 'Run unit tests'
    - job:
      displayName: UI tests
      steps:
      - script:  echo simulate running your ui tests!
        displayName: 'Run unit tests'

  - stage: Build
    dependsOn: [] # This will remove implicit dependency and run in parallel with the stage: Tests above
    jobs:
    - job:
      displayName: Build the application
      steps:
      - script: |
          echo Running all builds commands...
          echo ... commands successfully completed.
        displayName: 'Run build scripts & tasks'

  - stage: Dev
    dependsOn:
    - Tests
    - Build
    jobs:
    - deployment:
      displayName: Dev deploy
      environment: Dev
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo Running in the Dev environment as deployment job
                displayName: 'Dev based stage'

  - stage: Staging
    jobs:
    - deployment:
      displayName: Staging deploy
      environment: Staging
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo Running in the Staging environment as deployment job
                displayName: 'Staging based stage'

  - stage: Production
    jobs:
    - deployment:
      displayName: Production deploy
      environment: Production
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo Running in the Production environment as deployment job
                displayName: 'Production based stage'




# steps:
#   - bash: |
#       echo $(mySecret)
#     displayName: Show Secret
  # - bash: |
  #     terraform init \
  #       -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
  #       -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
  #       -backend-config="key=$TF_STATE_BLOB_FILE"
  #   displayName: Terraform Init
  #   env:
  #     TF_STATE_BLOB_ACCOUNT_NAME:   $(bkstrg)
  #     TF_STATE_BLOB_CONTAINER_NAME: $(bkcontainer)
  #     TF_STATE_BLOB_FILE:           $(bkstrgkey)

# stages:
#   - stage: terraform_tasks
#     jobs:
#       - job: validate
#         continueOnError: false
#         steps:
#         - task: TerraformInstaller@0
#           displayName: tfinstall
#           inputs:
#             terraformVersion: 'latest'
#         - task: TerraformTaskV3@3
#           displayName: init
#           inputs:
#             provider: 'azurerm'
#             command: 'init'
#             backendServiceArm: 'ServiceConnForServicePrincipalOwner'
#             backendAzureRmResourceGroupName: '$(bkstrgrg)'
#             backendAzureRmStorageAccountName: '$(bkstrg)'
#             backendAzureRmContainerName: '$(bkcontainer)'
#             backendAzureRmKey: '$(bkstrgkey)'
#         - task: TerraformTaskV3@3
#           displayName: validate
#           inputs:
#             provider: 'azurerm'
#             command: 'validate'
#         - task: TerraformTaskV3@3
#           displayName: plan
#           inputs:
#             provider: 'azurerm'
#             command: 'plan'
#             environmentServiceNameAzureRM: 'ServiceConnForServicePrincipalOwner'
#         - task: TerraformTaskV3@3
#           displayName: apply
#           inputs:
#             provider: 'azurerm'
#             command: 'apply'
#             environmentServiceNameAzureRM: 'ServiceConnForServicePrincipalOwner'
