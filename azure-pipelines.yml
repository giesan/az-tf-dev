# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  # name: default
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'tfstateRG'
  bkstrg: 'tfstatestgscc71213'
  bkcontainer: 'tfstate'
  bkstrgkey: 'terraform.tfstate'

steps:
  - bash: |
      echo ${mySecret}
    displayName: Show Secret
  # - bash: |
  #     terraform init \
  #       -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
  #       -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
  #       -backend-config="key=$TF_STATE_BLOB_FILE"
  #   displayName: Terraform Init
  #   env:
  #     TF_STATE_BLOB_ACCOUNT_NAME:   $(bkstrg)
  #     TF_STATE_BLOB_CONTAINER_NAME: $(bkcontainer)
  #     TF_STATE_BLOB_FILE:           $(bkstrgkey)

# stages:
#   - stage: terraform_tasks
#     jobs:
#       - job: validate
#         continueOnError: false
#         steps:
#         - task: TerraformInstaller@0
#           displayName: tfinstall
#           inputs:
#             terraformVersion: 'latest'
#         - task: TerraformTaskV3@3
#           displayName: init
#           inputs:
#             provider: 'azurerm'
#             command: 'init'
#             backendServiceArm: 'ServiceConnForServicePrincipalOwner'
#             backendAzureRmResourceGroupName: '$(bkstrgrg)'
#             backendAzureRmStorageAccountName: '$(bkstrg)'
#             backendAzureRmContainerName: '$(bkcontainer)'
#             backendAzureRmKey: '$(bkstrgkey)'
#         - task: TerraformTaskV3@3
#           displayName: validate
#           inputs:
#             provider: 'azurerm'
#             command: 'validate'
#         - task: TerraformTaskV3@3
#           displayName: plan
#           inputs:
#             provider: 'azurerm'
#             command: 'plan'
#             environmentServiceNameAzureRM: 'ServiceConnForServicePrincipalOwner'
#         - task: TerraformTaskV3@3
#           displayName: apply
#           inputs:
#             provider: 'azurerm'
#             command: 'apply'
#             environmentServiceNameAzureRM: 'ServiceConnForServicePrincipalOwner'
